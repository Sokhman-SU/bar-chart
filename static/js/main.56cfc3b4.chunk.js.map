{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["options","label","value","networkarray","_","program","groupBy","map","network","id","viewers","sumBy","cbsviewers","abcviewers","syfyviewers","genrearray","genre","console","log","sportsviewers","mysteryviewers","sfviewers","hometownarray","hometown","pittviewers","newviewers","bosviewers","clevviewers","getDataFromNetwork","result","labels","datasets","data","backgroundColor","borderWidth","Promise","resolve","requestApi","defaultNetwork","defaultData","App","React","useState","setNetwork","chartData","setChartData","useEffect","then","className","defaultValue","onChange","responsive","scales","yAxes","ticks","beginAtZero","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56cfc3b4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport { Bar } from \"react-chartjs-2\";\nimport program from \"./programData.json\";\nimport _ from 'lodash';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport \"./App.css\";\n\nconst options = [\n  { label: \"Viewers By Network\", value: \"network\" },\n  { label: \"Viewers By genre\", value: \"genre\" },\n  { label: \"Viewers By Hometown\", value: \"hometown\" }\n];\n\n\nconst networkarray = _(program)\n  .groupBy('network')\n  .map((network, id) => ({\n    network: id,\n    viewers: _.sumBy(network, 'viewers'),\n  }))\n  .value()\n\n  \nconst cbsarray = networkarray[0];\nconst cbsviewers = cbsarray.viewers;\n\nconst abcarray = networkarray[1];\nconst abcviewers = abcarray.viewers;\n\nconst syfyarray = networkarray[2];\nconst syfyviewers = syfyarray.viewers;\n\nconst genrearray = _(program)\n  .groupBy('genre')\n  .map((genre, id) => ({\n    genre: id,\n    viewers: _.sumBy(genre, 'viewers'),\n  }))\n  .value()\n\n  console.log(genrearray);\n\nconst sportsarray = genrearray[0];\nconst sportsviewers = sportsarray.viewers;\n\nconst mysteryarray = genrearray[1];\nconst mysteryviewers = mysteryarray.viewers;\n\nconst sfarray = genrearray[2];\nconst sfviewers = sfarray.viewers;\n\nconst hometownarray = _(program)\n  .groupBy('hometown')\n  .map((hometown, id) => ({\n    hometown: id,\n    viewers: _.sumBy(hometown, 'viewers'),\n  }))\n  .value()\n\n  console.log(hometownarray);\n\nconst pittarray = hometownarray[0];\nconst pittviewers = pittarray.viewers;\nconsole.log(pittviewers);\n\nconst newarray = hometownarray[1];\nconst newviewers = newarray.viewers;\n\nconst bosarray = hometownarray[2];\nconst bosviewers = bosarray.viewers;\n\nconst clevarray = hometownarray[3];\nconst clevviewers = clevarray.viewers;\n\nfunction requestApi(network) {\n  let result;\n  switch (network) {\n    case \"network\":\n      result = {\n        labels: ['CBS', 'ABC', 'SyFy'],\n        datasets: [\n          {\n            label: \"Network Viewship\",\n            data: [cbsviewers, abcviewers, syfyviewers],\n            backgroundColor: 'red',\n            borderWidth: 1\n          }\n        ]\n      };\n      break;\n\n    case \"genre\":\n      result = {\n        labels: ['Sports', 'Mystery', 'Science Fiction'],\n        datasets: [\n          {\n            label: \"Genre Viewship\",\n            data: [sportsviewers, mysteryviewers, sfviewers],\n            backgroundColor: 'blue',\n            borderWidth: 1\n          }\n        ]\n      };\n      break;\n\n      case \"hometown\":\n        result = {\n          labels: ['Pittsburgh', 'New York', 'Boston', 'Cleveland'],\n          datasets: [\n            {\n              label: \"Hometown Viewship\",\n              data: [pittviewers, newviewers, bosviewers, clevviewers],\n              backgroundColor: 'green',\n              borderWidth: 1\n            }\n          ]\n        };\n        break;\n\n    default:\n      break;\n  }\n  return Promise.resolve(result);\n}\n\nfunction getDataFromNetwork(network) {\n  return requestApi(network);\n}\n\n\n\nconst defaultNetwork = options[0];\nconst defaultData = {};\n\nexport default function App() {\n  const [network, setNetwork] = React.useState(defaultNetwork.value);\n  const [chartData, setChartData] = useState(defaultData);\n\n  const handleChange = (value) => {\n    const network = value.value;\n    setNetwork(network);\n  };\n\n  React.useEffect(() => {\n    getDataFromNetwork(network).then((chartData) => {\n      setChartData(chartData);\n    });\n  }, [network]);\n\n  return (\n    <div className=\"card-one\">\n      <h1>Tv Viewership</h1>\n     \n      <Tabs className=\"tabs\">\n        <TabList>\n          <Tab>Filter By: Viewship</Tab>\n          <Tab>Filter By: Location</Tab>\n        </TabList>\n\n        <TabPanel>\n        <span className=\"dropdown-select\">\n        <Select\n          options={options}\n          defaultValue={defaultNetwork}\n          onChange={handleChange}\n        />\n      </span>\n          <Bar\n          data={chartData}\n          options={{\n            responsive: true,\n            scales: {\n              yAxes: [\n                {\n                  ticks: {\n                    beginAtZero: true\n                  }\n                }\n              ]\n            },\n\n          }}\n          height={125}\n        />\n        </TabPanel>\n        <TabPanel>\n          <h2>Any content 2</h2>\n        </TabPanel>\n      </Tabs>\n     \n    </div>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}